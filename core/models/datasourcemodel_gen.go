// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dataSourceFieldNames          = builder.RawFieldNames(&DataSource{})
	dataSourceRows                = strings.Join(dataSourceFieldNames, ",")
	dataSourceRowsExpectAutoSet   = strings.Join(stringx.Remove(dataSourceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dataSourceRowsWithPlaceHolder = strings.Join(stringx.Remove(dataSourceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	dataSourceModel interface {
		Insert(ctx context.Context, data *DataSource) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DataSource, error)
		Update(ctx context.Context, data *DataSource) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDataSourceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	DataSource struct {
		Id          int64           `db:"id"`
		Day         sql.NullString  `db:"day"`
		Province    sql.NullString  `db:"province"`
		Address     sql.NullString  `db:"address"`
		ProductName sql.NullString  `db:"product_name"`
		Category    sql.NullString  `db:"category"`
		Price       sql.NullFloat64 `db:"price"`
	}
)

func newDataSourceModel(conn sqlx.SqlConn) *defaultDataSourceModel {
	return &defaultDataSourceModel{
		conn:  conn,
		table: "`data_source`",
	}
}

func (m *defaultDataSourceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDataSourceModel) FindOne(ctx context.Context, id int64) (*DataSource, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dataSourceRows, m.table)
	var resp DataSource
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDataSourceModel) Insert(ctx context.Context, data *DataSource) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, dataSourceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Day, data.Province, data.Address, data.ProductName, data.Category, data.Price)
	return ret, err
}

func (m *defaultDataSourceModel) Update(ctx context.Context, data *DataSource) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dataSourceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Day, data.Province, data.Address, data.ProductName, data.Category, data.Price, data.Id)
	return err
}

func (m *defaultDataSourceModel) tableName() string {
	return m.table
}
