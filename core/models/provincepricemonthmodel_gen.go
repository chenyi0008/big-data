// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	provincePriceMonthFieldNames          = builder.RawFieldNames(&ProvincePriceMonth{})
	provincePriceMonthRows                = strings.Join(provincePriceMonthFieldNames, ",")
	provincePriceMonthRowsExpectAutoSet   = strings.Join(stringx.Remove(provincePriceMonthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	provincePriceMonthRowsWithPlaceHolder = strings.Join(stringx.Remove(provincePriceMonthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	provincePriceMonthModel interface {
		Insert(ctx context.Context, data *ProvincePriceMonth) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProvincePriceMonth, error)
		Update(ctx context.Context, data *ProvincePriceMonth) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProvincePriceMonthModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ProvincePriceMonth struct {
		Id              int64           `db:"id"`
		Province        sql.NullString  `db:"province"`
		Day             sql.NullString  `db:"day"`
		PredictionPrice sql.NullFloat64 `db:"prediction_price"`
		AvgPrice        sql.NullFloat64 `db:"avg_price"`
	}
)

func newProvincePriceMonthModel(conn sqlx.SqlConn) *defaultProvincePriceMonthModel {
	return &defaultProvincePriceMonthModel{
		conn:  conn,
		table: "`province_price_month`",
	}
}

func (m *defaultProvincePriceMonthModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProvincePriceMonthModel) FindOne(ctx context.Context, id int64) (*ProvincePriceMonth, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", provincePriceMonthRows, m.table)
	var resp ProvincePriceMonth
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProvincePriceMonthModel) Insert(ctx context.Context, data *ProvincePriceMonth) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, provincePriceMonthRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Province, data.Day, data.PredictionPrice, data.AvgPrice)
	return ret, err
}

func (m *defaultProvincePriceMonthModel) Update(ctx context.Context, data *ProvincePriceMonth) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, provincePriceMonthRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Province, data.Day, data.PredictionPrice, data.AvgPrice, data.Id)
	return err
}

func (m *defaultProvincePriceMonthModel) tableName() string {
	return m.table
}
